import sys
import re
import hashlib
import requests
from PySide6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QLabel, 
                               QLineEdit, QPushButton, QWidget, QScrollArea, 
                               QHBoxLayout, QToolButton)
from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtGui import QIcon, QPixmap, QFont, QPainter, QImage

class PasswordCheckThread(QThread):
    finished = Signal(dict)

    def __init__(self, password):
        super().__init__()
        self.password = password

    def run(self):
        result = {}
        try:
            sha1_password = hashlib.sha1(self.password.encode('utf-8')).hexdigest().upper()
            prefix, suffix = sha1_password[:5], sha1_password[5:]
            
            url = f"https://api.pwnedpasswords.com/range/{prefix}"
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                for line in response.text.splitlines():
                    if suffix in line:
                        count = int(line.split(":")[1])
                        result["pwned"] = True
                        result["count"] = count
                        break
                else:
                    result["pwned"] = False
            else:
                result["error"] = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API"
        except Exception as e:
            result["error"] = f"–û—à–∏–±–∫–∞: {str(e)}"
        
        self.finished.emit(result)

class PasswordCheckerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è")
        self.setFixedSize(550, 500)
        
        self.scroll = QScrollArea()
        self.setCentralWidget(self.scroll)
        
        self.central_widget = QWidget()
        self.scroll.setWidget(self.central_widget)
        self.scroll.setWidgetResizable(True)
        
        self.layout = QVBoxLayout()
        self.central_widget.setLayout(self.layout)
        
        self.create_ui()
    
    def create_ui(self):
        self.label = QLabel("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        self.label.setAlignment(Qt.AlignCenter)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏
        self.password_container = QWidget()
        self.password_layout = QHBoxLayout(self.password_container)
        self.password_layout.setContentsMargins(0, 0, 0, 0)
        
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
        self.toggle_password_btn = QToolButton()
        self.toggle_password_btn.setIcon(self.create_eye_icon())
        self.toggle_password_btn.setCursor(Qt.PointingHandCursor)
        self.toggle_password_btn.setStyleSheet("""
            QToolButton {
                border: none;
                padding: 0px 5px;
                background: transparent;
            }
        """)
        self.toggle_password_btn.setCheckable(True)
        self.toggle_password_btn.toggled.connect(self.toggle_password_visibility)
        
        self.password_layout.addWidget(self.password_input)
        self.password_layout.addWidget(self.toggle_password_btn)
        
        self.check_button = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        self.check_button.clicked.connect(self.check_password)
        
        self.requirements_label = QLabel("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:")
        self.requirements_label.setStyleSheet("font-weight: bold;")
        
        self.requirements_list = QLabel("""
        - –ù–µ –º–µ–Ω–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤<br>
        - –ú–∏–Ω–∏–º—É–º 1 —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (!@#$ –∏ —Ç.–¥.)<br>
        - –ú–∏–Ω–∏–º—É–º 1 –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞<br>
        - –ú–∏–Ω–∏–º—É–º 1 —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞<br>
        - –ú–∏–Ω–∏–º—É–º 1 —Ü–∏—Ñ—Ä–∞<br>
        - –ù–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö –ø–∞—Ä–æ–ª–µ–π
        """)
        self.requirements_list.setTextFormat(Qt.RichText)
        
        self.result_title = QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        self.result_title.setStyleSheet("font-weight: bold;")
        
        self.result_text = QLabel()
        self.result_text.setAlignment(Qt.AlignLeft)
        self.result_text.setWordWrap(True)
        self.result_text.setTextFormat(Qt.RichText)
        self.result_text.setStyleSheet("""
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
        """)
        
        widgets = [
            self.label, self.password_container, self.check_button,
            self.requirements_label, self.requirements_list,
            self.result_title, self.result_text
        ]
        
        for widget in widgets:
            self.layout.addWidget(widget)
        
        self.layout.addStretch()
    
    def create_eye_icon(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≥–ª–∞–∑–∞ –∏–∑ —Å–∏–º–≤–æ–ª–∞"""
        image = QImage(24, 24, QImage.Format_ARGB32)
        image.fill(Qt.transparent)
        
        painter = QPainter(image)
        painter.setFont(QFont("Arial", 14))
        painter.drawText(image.rect(), Qt.AlignCenter, "üëÅ")
        painter.end()
        
        return QIcon(QPixmap.fromImage(image))
    
    def toggle_password_visibility(self, checked):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
        if checked:
            self.password_input.setEchoMode(QLineEdit.Normal)
            self.toggle_password_btn.setIcon(self.create_eye_slash_icon())
        else:
            self.password_input.setEchoMode(QLineEdit.Password)
            self.toggle_password_btn.setIcon(self.create_eye_icon())
    
    def create_eye_slash_icon(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç–æ–≥–æ –≥–ª–∞–∑–∞"""
        image = QImage(24, 24, QImage.Format_ARGB32)
        image.fill(Qt.transparent)
        
        painter = QPainter(image)
        painter.setFont(QFont("Arial", 14))
        painter.drawText(image.rect(), Qt.AlignCenter, "üîí")
        painter.end()
        
        return QIcon(QPixmap.fromImage(image))
    
    def check_password(self):
        password = self.password_input.text()
        errors = []
        successes = []
        
        self.check_length(password, successes, errors)
        self.check_special_chars(password, successes, errors)
        self.check_uppercase(password, successes, errors)
        self.check_lowercase(password, successes, errors)
        self.check_digits(password, successes, errors)
        
        self.check_button.setEnabled(False)
        self.result_text.setText("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –±–∞–∑—É —É—Ç–µ—á–µ–∫...")
        
        self.thread = PasswordCheckThread(password)
        self.thread.finished.connect(lambda res: self.on_api_check_done(res, successes, errors))
        self.thread.start()
    
    def on_api_check_done(self, api_result, successes, errors):
        self.check_button.setEnabled(True)
        
        if "error" in api_result:
            errors.append(f"√ó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ —É—Ç–µ—á–µ–∫: {api_result['error']}")
        elif api_result.get("pwned", False):
            errors.append(f"√ó –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ {api_result['count']} —É—Ç–µ—á–∫–∞—Ö (–Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω!)")
        else:
            successes.append("‚úì –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö")
        
        self.display_results(successes, errors)
    
    def check_length(self, password, successes, errors):
        if len(password) >= 12:
            successes.append("‚úì –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: 12+ —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            errors.append("√ó –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –º–µ–Ω–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤")
    
    def check_special_chars(self, password, successes, errors):
        if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
            successes.append("‚úì –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        else:
            errors.append("√ó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
    
    def check_uppercase(self, password, successes, errors):
        if re.search(r'[A-Z–ê-–Ø]', password):
            successes.append("‚úì –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
        else:
            errors.append("√ó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
    
    def check_lowercase(self, password, successes, errors):
        if re.search(r'[a-z–∞-—è]', password):
            successes.append("‚úì –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
        else:
            errors.append("√ó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
    
    def check_digits(self, password, successes, errors):
        if re.search(r'\d', password):
            successes.append("‚úì –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã")
        else:
            errors.append("√ó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–∏—Ñ—Ä—ã")
    
    def display_results(self, successes, errors):
        result_html = []
        
        if successes:
            result_html.append("<div style='color: green; margin-bottom: 10px;'>")
            result_html.append("<b>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:</b>")
            result_html.append("<ul style='margin-top: 5px; margin-bottom: 10px;'>")
            for success in successes:
                result_html.append(f"<li style='margin-bottom: 3px;'>{success}</li>")
            result_html.append("</ul>")
            result_html.append("</div>")
        
        if errors:
            result_html.append("<div style='color: red;'>")
            result_html.append("<b>–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:</b>")
            result_html.append("<ul style='margin-top: 5px;'>")
            for error in errors:
                result_html.append(f"<li style='margin-bottom: 3px;'>{error}</li>")
            result_html.append("</ul>")
            result_html.append("</div>")
        
        if not errors:
            result_html.insert(0, "<div style='color: green; font-weight: bold; font-size: 14pt; "
                                "text-align: center; margin: 15px 0;'>"
                                "–ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!</div>")
        else:
            result_html.insert(0, "<div style='color: red; font-weight: bold; font-size: 14pt; "
                                "text-align: center; margin: 15px 0;'>"
                                "–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!</div>")
        
        self.result_text.setText("".join(result_html))

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = PasswordCheckerApp()
    window.show()
    sys.exit(app.exec())
